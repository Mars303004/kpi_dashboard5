import streamlit as st
from matplotlib import pyplot as plt
import pandas as pd
import numpy as np
import base64
import io

# Sample KPI data
np.random.seed(42)
data = {
    'KPI Name': ['Revenue Growth', 'Customer Satisfaction', 'Efficiency Ratio'],
    'Trend Data': [
        np.random.randint(70, 120, size=12),
        np.random.randint(60, 110, size=12),
        np.random.randint(80, 130, size=12)
    ],
    'Value': [105, 88, 115]  # Current KPI values
}
df = pd.DataFrame(data)

# Function to generate sparkline as base64 image
def generate_sparkline(trend_data, color='#0f098e'):
    fig, ax = plt.subplots(figsize=(2, 0.5))
    ax.plot(trend_data, color=color, linewidth=2)
    ax.axis('off')
    fig.patch.set_alpha(0)
    plt.tight_layout(pad=0)
    buf = io.BytesIO()
    plt.savefig(buf, format="png", dpi=100, bbox_inches='tight', pad_inches=0)
    buf.seek(0)
    image_base64 = base64.b64encode(buf.read()).decode("utf-8")
    plt.close(fig)
    return f"<img src='data:image/png;base64,{image_base64}'/>"

df['Sparkline'] = df['Trend Data'].apply(lambda x: generate_sparkline(x, color='#0f098e'))

# CSS styling for KPI cards and layout
st.markdown(
    """
    <style>
    .kpi-card {
        background-color: #0f098e;
        color: white;
        padding: 15px;
        border-radius: 10px;
        width: 250px;
        display: inline-block;
        margin: 10px 10px 10px 0;
        vertical-align: top;
        box-shadow: 0 4px 8px rgba(0,0,0,0.2);
        cursor: pointer;
        user-select: none;
        transition: transform 0.1s ease-in-out;
    }
    .kpi-card:hover {
        transform: scale(1.05);
    }
    .kpi-title {
        font-size: 18px;
        font-weight: bold;
        margin-bottom: 5px;
    }
    .kpi-value {
        font-size: 28px;
        font-weight: bold;
        color: #b42020;
        margin-bottom: 5px;
    }
    .sparkline {
        margin-top: 5px;
    }
    .container {
        white-space: nowrap;
        overflow-x: auto;
        padding-bottom: 10px;
    }
    </style>
    """, unsafe_allow_html=True
)

st.title("Dashboard KPI")

# Container for KPI cards
st.markdown('<div class="container">', unsafe_allow_html=True)

# Create clickable KPI cards using buttons with keys
for idx, row in df.iterrows():
    card_html = f"""
    <div class="kpi-card" id="card-{idx}">
        <div class="kpi-title">{row['KPI Name']}</div>
        <div class="kpi-value">{row['Value']}</div>
        <div class="sparkline">{row['Sparkline']}</div>
    </div>
    """
    # Use st.markdown to display card, then a hidden button below for interaction
    st.markdown(card_html, unsafe_allow_html=True)
    if st.button(f"Show details for {row['KPI Name']}", key=f"btn-{idx}"):
        st.session_state['selected_kpi'] = idx

st.markdown('</div>', unsafe_allow_html=True)

# Show detailed chart with data labels if a KPI is selected
if 'selected_kpi' in st.session_state:
    selected_idx = st.session_state['selected_kpi']
    selected_row = df.iloc[selected_idx]
    trend = selected_row['Trend Data']
    kpi_name = selected_row['KPI Name']

    st.subheader(f"Detail Trend for {kpi_name}")

    # Plot with data labels
    fig, ax = plt.subplots(figsize=(8, 3))
    x = np.arange(1, len(trend) + 1)
    ax.plot(x, trend, marker='o', color='#0f098e', linewidth=2)
    ax.set_xticks(x)
    ax.set_xticklabels([f'Month {i}' for i in x], rotation=45)
    ax.set_ylabel('Value')
    ax.set_title(kpi_name, color='#0f098e', fontsize=16, fontweight='bold')

    # Add data labels on each point
    for i, val in enumerate(trend):
        ax.text(x[i], val + 1, str(val), ha='center', va='bottom', fontsize=9, color='#b42020')

    ax.grid(True, linestyle='--', alpha=0.5)
    st.pyplot(fig)